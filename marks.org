# Created 2021-01-11 Mon 22:58
#+TITLE: 400160537   Taneja, Shivam              tanejs4
#+AUTHOR: Mark Armstrong
* Totals

|--------+-----+----+-----+----+----+----+----+----+----+----+----+----+-----+-------+---|
| Work   |  A1 | A2 |  A3 | H1 | H2 | H3 | H4 | H5 | H6 | H7 | H8 | H9 | H10 | Total |   |
|--------+-----+----+-----+----+----+----+----+----+----+----+----+----+-----+-------+---|
| Mark   |  86 | 87 |  87 | 90 | 49 | 30 | 18 |    | 50 | 27 | 60 | 45 |  15 | 86.58 | A |
|--------+-----+----+-----+----+----+----+----+----+----+----+----+----+-----+-------+---|
| Out of | 100 | 90 | 100 | 80 | 45 | 40 | 40 | 35 | 40 | 30 | 60 | 60 |  45 |   100 |   |
|--------+-----+----+-----+----+----+----+----+----+----+----+----+----+-----+-------+---|
#+TBLFM: @2$15='(/ (round (* 100.0 (+ (* 0.2 @2$2) (* 25.0 (/ @2$3 90.0)) (* 0.3 @2$4) (* 2.5 (/ @2$5 80.0)) (* 2.5 (/ @2$6 45.0)) (* 2.5 (/ @2$7 40.0)) (* 2.5 (/ @2$8 40.0)) (* 2.5 (/ @2$9 35.0)) (* 2.5 (/ @2$10 40.0)) (* 2.5 (/ @2$11 30.0)) (* 2.5 (/ @2$12 60.0)) (* 2.5 (/ @2$13 60.0)) (* 2.5 (/ @2$14 45.0))))) 100.0);N

* Assignment 3

|  Part | Description/breakdown | Mark | Out of | Bonus | Comments                                                                                                                             |
|-------+-----------------------+------+--------+-------+--------------------------------------------------------------------------------------------------------------------------------------|
|     1 | The representation    |      |        |       |                                                                                                                                      |
|       | ├─ Ruby GCL           |    3 |      3 |       |                                                                                                                                      |
|       | ├─ Clojure GCL        |    3 |      3 |       |                                                                                                                                      |
|       | ├─ Ruby GCLe          |    2 |      2 |       |                                                                                                                                      |
|       | └─ Documentation      |    2 |      2 |       |                                                                                                                                      |
|     2 | Stack machine         |   20 |     20 |       |                                                                                                                                      |
|       | └─ Documentation      |    5 |      5 |       |                                                                                                                                      |
|     3 | Small step semantics  |   14 |     20 |       | One provided test and an additional test involving a small loop could not be defined due to missing records. One other test failed.  |
|       | └─ Documentation      |    5 |      5 |       |                                                                                                                                      |
|     4 | Big step semantics    |   15 |     16 |       | One of the tests resulted in a huge amount of unwanted integers being printed. Remove diagnostic print statements before submission! |
|       | ├─ Well-scopedness    |   10 |     16 |       | 2 provided tests failed (they fail on my end within the container or on my local machine.)                                           |
|       | └─ Documentation      |    8 |      8 |       |                                                                                                                                      |
|     5 | GCLe in Clojure       |      |        |     8 |                                                                                                                                      |
|       | └─ Documentation      |      |        |     2 |                                                                                                                                      |
|-------+-----------------------+------+--------+-------+--------------------------------------------------------------------------------------------------------------------------------------|
| Total |                       |   87 |    100 |       |                                                                                                                                      |
#+TBLFM: @>$3=vsum(@2$3..@>>$3)::@>$4=vsum(@2$4..@>>$4)

* Assignment 2

|  Part | Description/breakdown | Mark | Out of | Bonus | Comments                       |
|-------+-----------------------+------+--------+-------+--------------------------------|
|     1 | The representation    |      |        |       |                                |
|       | ├─ Scala              |    4 |      4 |       |                                |
|       | ├─ Ruby               |    4 |      4 |       |                                |
|       | └─ Documentation      |    2 |      2 |       |                                |
|     2 | Typechecking          |      |        |       |                                |
|       | ├─ Scala              |   16 |     16 |       |                                |
|       | ├─ Ruby               |   13 |     16 |       | An extra coverage test failed. |
|       | └─ Documentation      |    8 |      8 |       |                                |
|     3 | Type erasure          |      |        |       |                                |
|       | ├─ Scala              |   16 |     16 |       |                                |
|       | ├─ Ruby               |   16 |     16 |       |                                |
|       | └─ Documentation      |    8 |      8 |       |                                |
|     4 | Interpreting          |      |        |       |                                |
|       | ├─ Scala              |      |        |     4 |                                |
|       | ├─ Ruby               |      |        |     4 |                                |
|       | └─ Documentation      |      |        |     2 |                                |
|     5 | Pairs                 |      |        |       |                                |
|       | ├─ Scala              |      |        |     4 |                                |
|       | ├─ Ruby               |      |        |     4 |                                |
|       | └─ Documentation      |      |        |     2 |                                |
|-------+-----------------------+------+--------+-------+--------------------------------|
| Total |                       |   87 |     90 |       |                                |
#+TBLFM: @>$3=vsum(@2$3..@>>$3)::@>$4=vsum(@2$4..@>>$4)

* Assignment 1

|  Part | Description/breakdown    | Mark | Out of | Bonus | Comments                                                                |
|-------+--------------------------+------+--------+-------+-------------------------------------------------------------------------|
|     1 | Interpreter in Scala     |      |        |       |                                                                         |
|       | ├─ Representation        |    4 |      4 |       |                                                                         |
|       | ├─ Interpreter           |   12 |     12 |       |                                                                         |
|       | └─ Documentation         |    2 |      4 |       | No code snippets. Very light commentary here.                           |
|     2 | Interpreter in Prolog    |      |        |       |                                                                         |
|       | ├─ Representation        |    4 |      4 |       |                                                                         |
|       | ├─ Interpreter           |    8 |     12 |       | A test of expression abs(-5) - abs(-5) failed.                          |
|       | └─ Documentation         |    3 |      4 |       | A bit better.                                                           |
|     3 | Variables & substitution |      |        |       |                                                                         |
|       | ├─ Scala                 |    9 |     12 |       | A variable substition leaked during a test into an adjacent expression. |
|       | ├─ Prolog                |   11 |     12 |       | No new errors.                                                          |
|       | └─ Documentation         |    5 |      6 |       |                                                                         |
|     4 | Boolean expressions      |      |        |       |                                                                         |
|       | ├─ Scala                 |   12 |     12 |       |                                                                         |
|       | ├─ Prolog                |   11 |     12 |       | No new errors.                                                          |
|       | └─ Documentation         |    5 |      6 |       |                                                                         |
|     5 | Parsing                  |      |        |     7 |                                                                         |
|       | └─ Documentation         |      |        |     3 |                                                                         |
|-------+--------------------------+------+--------+-------+-------------------------------------------------------------------------|
| Total |                          |   86 |    100 |       |                                                                         |
#+TBLFM: @20$3=vsum(@2$3..@19$3)::@20$4=vsum(@2$4..@19$4)

* Homework 10

** Comments

The Scala and Clojure files are just the provided code.

** The marks

|  Part | Description | Mark | Out of | Bonus |
|-------+-------------+------+--------+-------|
|     1 | Clojure     |    0 |     15 |       |
|     2 | Ruby        |   15 |     15 |       |
|     3 | Scala       |    0 |     15 |       |
|     4 | Prolog      |      |        |     5 |
|-------+-------------+------+--------+-------|
| Total |             |   15 |     45 |     5 |
#+TBLFM: @6$3=vsum(@2$3..@5$3)::@6$4=vsum(@2$4..@5$4)::@6$5=vsum(@2$5..@5$5)

* Homework 9
** Comments
- Even though part2 and part3 suppose to do the same job. But, we expect part
  threes' implementation do the checking in a loop. So you need to use commands
  such as ~while~, ~for~, ~doseq~, etc. Check the following implementation:

#+begin_src clojure
(defmacro guarded-do
  [& commands]
  `(while (not= (empty? (allowed-commands [~@commands])))
     (eval (rand-nth (allowed-commands [~@commands])))))
#+end_src
** The marks

|  Part | Description                                           | Mark | Out of | Bonus |
|-------+-------------------------------------------------------+------+--------+-------|
|     1 | Sequence of commands whose guards are satisfied       |   20 |     20 |       |
|     2 | A nondeterministic if expression for guarded commands |   15 |     15 |       |
|     3 | A nondeterministic do expression for guarded commands |    0 |     15 |       |
|     4 | GCD                                                   |   10 |     10 |       |
|     5 | GCD by iteration                                      |      |        |     5 |
|-------+-------------------------------------------------------+------+--------+-------|
| Total |                                                       |   45 |     60 |     5 |
#+TBLFM: @7$3=vsum(@2$3..@6$3)::@7$4=vsum(@2$4..@6$4)::@7$5=vsum(@2$5..@6$5)
* Homework 8
** Comments
- It looks good to me. Well done 😀
** The marks

|  Part | Description        | Mark | Out of | Bonus |
|-------+--------------------+------+--------+-------|
|     1 | Exponent           |   10 |     10 |       |
|     2 | Sum of a list      |   10 |     10 |       |
|     3 | Flatten a list     |   20 |     20 |       |
|     4 | Pstfixes of a list |   20 |     20 |       |
|-------+--------------------+------+--------+-------|
| Total |                    |   60 |     60 |     0 |
#+TBLFM: @6$3=vsum(@2$3..@5$3)::@6$4=vsum(@2$4..@5$4)::@6$5=vsum(@2$5..@5$5)

* Homework 7
** Comments

-You have just a tiny mistake changing the place of the variable names. Check
the following implementations:

#+begin_src scala
def prettify(t: ULTerm): String = {x
  def variableName(index: Int): String = {
    val letter = (index % 26 + 97).toChar
    val number = index / 26
    if (number == 0)
      letter.toString
    else
      letter.toString + number.toString
  }

 def prettifyHelper(t: ULTerm, currentBinders: Int): String = t match {
    case ULVar(i) if i < currentBinders =>
      // The indexing goes from the innermost binder to the outermost.
      // So if i is 0, it refers to the (currentBinders - 1)'th bound variable.
      //    If i is 1, it refers to the (currentBinders - 2)'th bound variable.
      variableName(currentBinders - i - 1)
    case ULVar(i) =>
      // Indexing can go in increasing order for free variables.
      variableName(i)
    case ULAbs(t1) =>
      val name = variableName(currentBinders)
      val body = prettifyHelper(t1,currentBinders+1)
      "lambda " + name +  " . " + body
    case ULApp(t1,t2) =>
      val t1_pretty = prettifyHelper(t1,currentBinders)
      val t2_pretty = prettifyHelper(t2,currentBinders)
      "(" + t1_pretty + ") (" + t2_pretty + ")"
  }

  prettifyHelper(t,0)
}
#+end_src

#+begin_src ruby
class ULTerm
  def variableName(index)
    # Choose the index'th character past lowercase a.
    # If the index is more than 26, we'll also
    # append a number, starting from 1 and counting up as needed.
    letter = (index % 26 + 97).chr
    number = index / 26  # for some reason, the slash breaks my fontification
                         # until a matching one, so here: /
                         # If my students are reading this, don't worry about it;
                         # it's some sort of bug with my editor.
    if number == 0
      letter
    else
      letter + number.to_c
    end
  end
  
  def prettify
    prettify_helper(0)
  end
end
class ULVar < ULTerm
  def prettify_helper(current_binders)
    if @index < current_binders
      variableName(current_binders - @index - 1)
    else
      variableName(@index)
    end
    
    # This alternate implementation names all bound variables xn,
    # where n is an integer
    # and all free variables zn where n is an integer.
    #if @index < current_binders
    #  # This is a bound variable.
    #  'x' + @index.to_s
    #else
    #  # This is a free variable.
    #  'z' + (@index - current_binders).to_s
    #end
  end
end

class ULAbs < ULTerm
  def prettify_helper(current_binders)
    "lambda " + variableName(current_binders) + " . " + @t.prettify_helper(current_binders+1)
    # This alternate code matches that in the ULVar method
    # which gave all bound variables the name "x" 
    #"lambda x" + current_binders.to_s + " . " + @t.prettify_helper(current_binders+1)
  end
end

class ULApp < ULTerm
  def prettify_helper(current_binders)
    pretty1 = @t1.prettify_helper(current_binders)
    pretty2 = @t2.prettify_helper(current_binders)
    "(" + pretty1 + ") (" + pretty2 + ")" 
  end
end
#+end_src

** The marks

| Part  | Description                          | Mark | Out of | Bonus |
|-------+--------------------------------------+------+--------+-------|
| 1     | The "pretty printer" prettify method |   27 |     30 |       |
|-------+--------------------------------------+------+--------+-------|
| Total |                                      |   27 |     30 |       |
#+TBLFM: @3$3=vsum(@2$3..@2$3)::@3$4=vsum(@2$4..@2$4)

* Homework 6

** Comments

- Part1: You can use ~attr_reader~ to give access to instance variables.

- Part1: Your implementation is good but it can be done much simplier. Check out
  the sample implementation bellow to grab the idea:

#+begin_src ruby
class Expr
end

class Negative <Expr
    attr_reader :n
    def initialize(a)
        @n = a
    end
    def interpret; -@n.interpret end
end

class AbsAbsolute  <Expr
    attr_reader :n
    def initialize(a)
        @a = a
    end
    def interpret; @a.interpret.abs end
end
#+end_src

** The marks

|  Part | Description                              | Mark | Out of | Bonus |
|-------+------------------------------------------+------+--------+-------|
|     1 | A representation and interpreter in Ruby |   40 |     40 |       |
|     2 | Add variables and substitution           |   10 |        |    10 |
|-------+------------------------------------------+------+--------+-------|
| Total |                                          |   50 |     40 |       |
#+TBLFM: @4$3=vsum(@2$3..@3$3)::@4$4=vsum(@2$4..@3$4)

* Homework 5

** Comments

- No submission.

** The marks

|  Part | Description                       | Mark | Out of | Bonus |
|-------+-----------------------------------+------+--------+-------|
|     1 | Fizzbuzzing by loops              |    0 |      5 |       |
|     2 | Fizzbuzzing by iterators          |    0 |     10 |       |
|     3 | Generalised fizzbuzzing           |    0 |     20 |       |
|     4 | Generalised fizzbuzzing in Scala  |      |        |    10 |
|     5 | Generalised fizzbuzzing in Prolog |      |        |    10 |
|-------+-----------------------------------+------+--------+-------|
| Total |                                   |    0 |     35 |       |
#+TBLFM: @>$3=vsum(@2$3..@>>$3)::@>$4=vsum(@2$4..@>>$4)

* Homework 4

** Comments

- Compilation Failed.

#+begin_src text
h4.sc:31: type mismatch;
 found   : ammonite.$file.h4.SNil.type
 required: Boolean
    case SNil => SNil
                 ^
h4.sc:49: missing parameter type for expanded function ((x$4: <error>) => scala.Tuple2(x, x$4))
    case (Cons(x, f), SNil) =>  Cons((x, _), _ => zipSafe(f(), st2))
                                         ^
h4.sc:50: missing parameter type for expanded function ((x$6: <error>) => scala.Tuple2(x, x$6))
    case (SNil,Cons(x, f)) =>  Cons((x, _), _ => zipSafe(st1,f()))
                                        ^
h4.sc:55: type mismatch;
 found   : ammonite.$file.h4.Stream[A]
 required: ammonite.$file.h4.Stream[(A, B)]
    mergeSafehelpr(st1,st2)
                   ^
h4.sc:55: type mismatch;
 found   : ammonite.$file.h4.Stream[B]
 required: ammonite.$file.h4.Stream[(A, B)]
    mergeSafehelpr(st1,st2)
                       ^
Compilation Failed
#+end_src

- Better to check your implementation for any error before doing your final
  submission.

- You got the idea about the implementations. However, has
  problem on defining your type signature. Check the following implementations.

#+begin_src amm
def filter[A](p: A => Boolean, s: Stream[A]): Stream[A] = s match {
  case SNil => SNil
  case Cons(a,f) => if (p(a)) Cons(a, _ => filter(p,f())) else filter(p,f())
  }
#+end_src

#+begin_src amm
def zip[A,B](s: Stream[A], t: Stream[B]): Stream[Tuple2[A,B]] = s match {
  case SNil => SNil
  case Cons(a,f) => t match {
    case SNil => SNil
    case Cons(b,g) => Cons((a,b), _ => zip(f(), g()))
    }
  }
#+end_src

#+begin_src amm
def merge[A](s: Stream[A], t: Stream[A]): Stream[A] = s match {
  case SNil => t
  case Cons(a,f) => Cons(a, _ => merge(t, f()))
  }
#+end_src

#+begin_src amm
def all[A](p: A => Boolean, s: Stream[A]): Boolean = s match {
  case SNil => true
  case Cons(a,f) => p(a) && all(p,f())
  }
#+end_src

#+begin_src amm
def exists[A](p: A => Boolean, s: Stream[A]): Boolean = s match {
  case SNil => false
  case Cons(a,f) => p(a) || exists(p,f())
  }
#+end_src

** The marks

|  Part | Description                             | Mark | Out of | Bonus |
|-------+-----------------------------------------+------+--------+-------|
|     1 | Filtering streams                       |    5 |     10 |       |
|     2 | Zipping and merging streams             |    8 |     20 |       |
|     3 | “Quantifying” over streams              |    5 |     10 |       |
|     4 | Tolerant zipping and merging of streams |      |        |    10 |
|-------+-----------------------------------------+------+--------+-------|
| Total |                                         |   18 |     40 |       |
#+TBLFM: @>$3=vsum(@2$3..@>>$3)::@>$4=vsum(@2$4..@>>$4)

* Homework 3
** Comments
- Part2 : ~2~ is the smallest prime number according to prime numbers
  definition. Therefore, you need a base case for ~i<2~ which should return
  false which is not included in your code.
** The marks

|  Part | Description                             | Mark | Out of | Bonus |
|-------+-----------------------------------------+------+--------+-------|
|     1 | Flattening and ordering trees in Prolog |   10 |     20 |       |
|     2 | Predicates in Scala                     |   20 |     20 |       |
|-------+-----------------------------------------+------+--------+-------|
| Total |                                         |   30 |     40 |     0 |
#+TBLFM: @4$3=vsum(@2$3..@3$3)::@4$4=vsum(@2$4..@3$4)::@4$5=vsum(@2$5..@3$5)
* Homework 2

** Comments

- Part2: You haven't checked if ~X~, is ~>=10~ when ~isDigitList(X,[X])~ and if
  ~X>=10~ if ~isDigitList(X,[H|T])~.

Quite efficient prime palindrome.

** The marks

|  Part | Description                   | Mark | Out of | Bonus |
|-------+-------------------------------+------+--------+-------|
|     1 | Prime checker                 |    5 |      5 |       |
|     2 | From number to list of digits |   12 |     15 |       |
|     3 | Palindrome                    |   10 |     10 |       |
|     4 | Prime Palindrome              |   15 |     15 |       |
|     5 | Efficiency                    |    7 |        |    10 |
|-------+-------------------------------+------+--------+-------|
| Total |                               |   49 |     45 |       |
#+TBLFM: @>$3=vsum(@2$3..@>>$3)::@>$4=vsum(@2$4..@>>$4)

* Homework 1

** Comments

Looks good.

The bonus implementation discards all type information
about the elements of the tree.

** The marks

|  Part | Description                    | Mark | Out of | Bonus |
|-------+--------------------------------+------+--------+-------|
|     1 | ~LeafTree~ and ~BinTree~ types |   20 |     20 |       |
|     2 | Flattening                     |   20 |     20 |       |
|     3 | Ordering                       |   20 |     20 |       |
|     4 | ~StructTree~ type              |   20 |     20 |       |
|     5 | Flattening ~StructTree~        |   10 |        |    20 |
|-------+--------------------------------+------+--------+-------|
| Total |                                |   90 |     80 |       |
#+TBLFM: @>$3=vsum(@2$3..@>>$3)::@>$4=vsum(@2$4..@>>$4)
